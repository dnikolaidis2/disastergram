version: '3.7'

services:

# Backend

  auth:
    image: dnikolaidis/disastergram-auth:nginx
    ports:
      - "5000:80"
    restart: on-failure
    environment:
      POSTGRES_HOST: auth-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "${AUTH_DB_PASSWORD}"
      BASEURL: "http://${HOSTNAME}/api"
      DOCKER_HOST: auth:80
      FLASK_APP: /app/auth
      FLASK_APP_MIGRATIONS: /app/migrate/mirations
      FLASK_APP_INSTANCE: /app/instance
    volumes:
      - ./disastergram-auth/migrate:/app/migrate
    depends_on:
      - auth-db
      - zoo1
      - zoo2
      - zoo3
    networks:
      - auth-net
      - proxy-net
      - zoo-net

  # https://hub.docker.com/_/postgres
  auth-db:
    image: postgres:11
    ports:
      - "6432:5432"
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: "${AUTH_DB_PASSWORD}"
    volumes:
      - auth-data:/var/lib/postgresql/data
    networks:
      - auth-net

  app:
    image: dnikolaidis/disastergram-applogic:latest
    ports:
      - "5001:5000"
    restart: on-failure
    depends_on:
      - app-db
      - auth
      - zoo1
      - zoo2
      - zoo3
    networks:
      - app-net
      - auth-net
      - proxy-net
      - zoo-net

  app-db:
    image: postgres:11
    restart: on-failure
    volumes:
      - app-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: 1234
    networks:
      - app-net

# storage zoo

  storage_1:
    image: dnikolaidis/disastergram-storage:nginx
    ports:
      - "5002:80"
    volumes:
      - storage_1_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_1
      - app
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 1
      BASEURL: "http://${HOSTNAME}/storage/1/"
      DOCKER_HOST: storage_1:80
      REDIS_HOST: storage_redis_1
    networks:
      - storage-zoo-net
      - app-net
      - proxy-net
      - zoo-net

  storage_redis_1:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_1_data:/data
    networks:
      - storage-zoo-net

  storage_2:
    image: dnikolaidis/disastergram-storage:nginx
    ports:
      - "5003:80"
    volumes:
      - storage_2_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_2
      - app
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 2
      BASEURL: "http://${HOSTNAME}/storage/2/"
      DOCKER_HOST: storage_2:80
      REDIS_HOST: storage_redis_2
    networks:
      - storage-zoo-net
      - app-net
      - proxy-net
      - zoo-net

  storage_redis_2:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_2_data:/data
    networks:
      - storage-zoo-net

  storage_3:
    image: dnikolaidis/disastergram-storage:nginx
    ports:
      - "5004:80"
    volumes:
      - storage_3_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_3
      - app
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 3
      BASEURL: "http://${HOSTNAME}/storage/3/"
      DOCKER_HOST: storage_3:80
      REDIS_HOST: storage_redis_3
    networks:
      - storage-zoo-net
      - app-net
      - proxy-net
      - zoo-net

  storage_redis_3:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_3_data:/data
    networks:
      - storage-zoo-net

  storage_4:
    image: dnikolaidis/disastergram-storage:nginx
    ports:
      - "5005:80"
    volumes:
      - storage_4_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_4
      - app
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 4
      BASEURL: "http://${HOSTNAME}/storage/4/"
      DOCKER_HOST: storage_4:80
      REDIS_HOST: storage_redis_4
    networks:
      - storage-zoo-net
      - app-net
      - proxy-net
      - zoo-net

  storage_redis_4:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_4_data:/data
    networks:
      - storage-zoo-net

  storage_5:
    image: dnikolaidis/disastergram-storage:nginx
    ports:
      - "5006:80"
    volumes:
      - storage_5_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_5
      - app
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 5
      BASEURL: "http://${HOSTNAME}/storage/5/"
      DOCKER_HOST: storage_5:80
      REDIS_HOST: storage_redis_5
    networks:
      - storage-zoo-net
      - app-net
      - proxy-net
      - zoo-net

  storage_redis_5:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_5_data:/data
    networks:
      - storage-zoo-net

# the actual zoo

  zoo1:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      - zoo-net
    
  zoo2:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo2
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888
    networks:
      - zoo-net
    
  zoo3:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo3
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888
    networks:
      - zoo-net

# Frontend

  api-frontend:
    image: dnikolaidis/disastergram-web:latest
    restart: on-failure
    volumes:
     - './disastergram-web:/usr/src/app'
     - '/usr/src/app/node_modules'
    depends_on:
      - auth
      - app
      - storage_1
      - storage_2
      - storage_3
      - storage_4
      - storage_5
    environment:
     - NODE_ENV=development
    networks:
      - proxy-net

  reverse-proxy:
    image: nginx:1.16
    environment:
      - NGINX_HOST=${HOSTNAME}
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt/:/etc/letsencrypt/
    restart: on-failure
    ports:
      - 0.0.0.0:80:80
      - 0.0.0.0:443:443
    depends_on:
      - auth
      - api-frontend
      - app
      - storage_1
      - storage_2
      - storage_3
      - storage_4
      - storage_5
    networks:
      - proxy-net

# Continual deployment

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 #Polling rate
    restart: on-failure
    depends_on:
      - auth
      - app
      - api-frontend

networks:
  auth-net:
  app-net:
  zoo-net:
  proxy-net:
  storage-zoo-net:

volumes:
  auth-data:
  app-data:
  storage_1_image_data:
  storage_2_image_data:
  storage_3_image_data:
  storage_4_image_data:
  storage_5_image_data:
  storage_redis_1_data:
  storage_redis_2_data:
  storage_redis_3_data:
  storage_redis_4_data:
  storage_redis_5_data: