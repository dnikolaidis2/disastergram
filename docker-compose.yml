version: '3.7'

services:

# Backend

  auth:
    build:
      context: ./disastergram-auth
      dockerfile: Dockerfile-nginx
    ports:
      - "5000:80"
    restart: on-failure
    environment:
      POSTGRES_HOST: auth-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "${AUTH_DB_PASSWORD}"
      BASEURL: "${URL_SCHEME}://${HOSTNAME}/auth"
      DOCKER_HOST: auth:80
      FLASK_APP: /app/auth
      FLASK_APP_MIGRATIONS: /app/migrate/migrations
      FLASK_APP_INSTANCE: /app/instance
    volumes:
      - ./disastergram-auth/migrate:/app/migrate
    depends_on:
      - auth-db
      - zoo1
      - zoo2
      - zoo3

  # https://hub.docker.com/_/postgres
  auth-db:
    image: postgres:11
    ports:
      - "6432:5432"
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: "${AUTH_DB_PASSWORD}"
    volumes:
      - auth-data:/var/lib/postgresql/data

  app:
    build: ./disastergram-applogic
    ports:
      - "5001:5000"
    restart: on-failure
    environment:
      POSTGRES_HOST: app-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "${APP_DB_PASSWORD}"
      BASEURL: "${URL_SCHEME}://${HOSTNAME}/api"
      DOCKER_HOST: app:5000
    depends_on:
      - app-db
      - zoo1
      - zoo2
      - zoo3

  app-db:
    image: postgres:11
    restart: on-failure
    ports:
      - "6433:5432"
    volumes:
      - app-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: "${APP_DB_PASSWORD}"

# storage zoo

  storage_1:
    build:
      context: ./disastergram-storage
      dockerfile: Dockerfile-nginx
    ports:
      - "5002:80"
    volumes:
      - storage_1_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_1
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 1
      BASEURL: "${URL_SCHEME}://${HOSTNAME}/storage/1/"
      DOCKER_HOST: storage_1:80
      REDIS_HOST: storage_redis_1

  storage_redis_1:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_1_data:/data

  storage_2:
    build:
      context: ./disastergram-storage
      dockerfile: Dockerfile-nginx
    ports:
      - "5003:80"
    volumes:
      - storage_2_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_2
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 2
      BASEURL: "${URL_SCHEME}://${HOSTNAME}/storage/2/"
      DOCKER_HOST: storage_2:80
      REDIS_HOST: storage_redis_2

  storage_redis_2:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_2_data:/data

  storage_3:
    build:
      context: ./disastergram-storage
      dockerfile: Dockerfile-nginx
    ports:
      - "5004:80"
    volumes:
      - storage_3_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_3
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 3
      BASEURL: "${URL_SCHEME}://${HOSTNAME}/storage/3/"
      DOCKER_HOST: storage_3:80
      REDIS_HOST: storage_redis_3

  storage_redis_3:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_3_data:/data

  storage_4:
    build:
      context: ./disastergram-storage
      dockerfile: Dockerfile-nginx
    ports:
      - "5005:80"
    volumes:
      - storage_4_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_4
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 4
      BASEURL: "${URL_SCHEME}://${HOSTNAME}/storage/4/"
      DOCKER_HOST: storage_4:80
      REDIS_HOST: storage_redis_4

  storage_redis_4:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_4_data:/data

  storage_5:
    build:
      context: ./disastergram-storage
      dockerfile: Dockerfile-nginx
    ports:
      - "5006:80"
    volumes:
      - storage_5_image_data:/app/storage/images
    restart: on-failure
    depends_on:
      - storage_redis_5
      - zoo1
      - zoo2
      - zoo3
    environment:
      STORAGE_ID: 5
      BASEURL: "${URL_SCHEME}://${HOSTNAME}/storage/5/"
      DOCKER_HOST: storage_5:80
      REDIS_HOST: storage_redis_5

  storage_redis_5:
    image: redis:5.0
    restart: on-failure
    volumes:
      - storage_redis_5_data:/data

# the actual zoo

  zoo1:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    
  zoo2:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo2
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888
    
  zoo3:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo3
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888

# Frontend

  frontend:
    build: ./disastergram-web
    ports:
      - "3000:3000"
    restart: on-failure
    volumes:
     - './disastergram-web:/usr/src/app'
     - '/usr/src/app/node_modules'
    depends_on:
      - auth
      - app
      - storage_1
      - storage_2
      - storage_3
      - storage_4
      - storage_5
    environment:
     - NODE_ENV=development

  reverse-proxy:
    image: nginx:1.16
    environment:
      NGINX_HOST: "${HOSTNAME}"
      AUTH_URL: http://auth:80/
      API_URL: http://app:5000
      FRONTEND_URL: http://frontend:3000
      STORAGE_1_URL: http://storage_1:80/
      STORAGE_2_URL: http://storage_2:80/
      STORAGE_3_URL: http://storage_3:80/
      STORAGE_4_URL: http://storage_4:80/
      STORAGE_5_URL: http://storage_5:80/
    volumes:
      - ./conf/nginx.template:/etc/nginx/nginx.template
      - ./conf/ssl.template:/etc/nginx/ssl.template
      - /etc/letsencrypt/:/etc/letsencrypt/
    command: /bin/bash -c 
             "envsubst '$$NGINX_HOST $$API_URL $$AUTH_URL $$FRONTEND_URL $$STORAGE_1_URL $$STORAGE_2_URL $$STORAGE_3_URL $$STORAGE_4_URL $$STORAGE_5_URL' 
             < /etc/nginx/nginx.template > /etc/nginx/nginx.conf &&
             envsubst '\${NGINX_HOST}' < /etc/nginx/ssl.template > /etc/nginx/ssl.conf &&
             exec nginx -g 'daemon off;'"
    restart: on-failure
    ports:
      - 0.0.0.0:80:80
      - 0.0.0.0:443:443
    depends_on:
      - auth
      - frontend
      - app
      - storage_1
      - storage_2
      - storage_3
      - storage_4
      - storage_5

volumes:
  auth-data:
  app-data:
  storage_1_image_data:
  storage_2_image_data:
  storage_3_image_data:
  storage_4_image_data:
  storage_5_image_data:
  storage_redis_1_data:
  storage_redis_2_data:
  storage_redis_3_data:
  storage_redis_4_data:
  storage_redis_5_data: