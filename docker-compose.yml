version: '3.7'

services:

# Backend

  auth:
    build: ./disastergram-auth
    image: dnikolaidis/disastergram-auth:latest
    ports:
      - "5000:5000"
    restart: on-failure
    depends_on:
      - auth-db
      - zoo1
      - zoo2
      - zoo3
    networks:
      - auth-net
      - proxy-net
      - zoo-net

  # https://hub.docker.com/_/postgres
  auth-db:
    image: postgres:11
    ports:
      - "6432:5432"
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: disastergram
    volumes:
      - auth-data:/var/lib/postgresql/data
    networks:
      - auth-net

  app:
    build: ./disastergram-applogic
    image: dnikolaidis/disastergram-applogic:latest
    ports:
      - "5001:5000"
    restart: on-failure
    depends_on:
      - app-db
      - auth
      - zoo1
      - zoo2
      - zoo3
    networks:
      - app-net
      - auth-net
      - proxy-net
      - zoo-net

  app-db:
    image: postgres:11
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: 1234
    networks:
      - app-net

  zoo1:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      - zoo-net
    
  zoo2:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo2
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888
    networks:
      - zoo-net
    
  zoo3:
    image: zookeeper:3.4
    restart: on-failure
    hostname: zoo3
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888
    networks:
      - zoo-net

# Frontend

  api-frontend:
    build: ./disastergram-web
    image: dnikolaidis/disastergram-web:latest
    restart: on-failure
    volumes:
     - './disastergram-web:/usr/src/app'
     - '/usr/src/app/node_modules'
    environment:
     - NODE_ENV=development
    networks:
      - proxy-net

  reverse-proxy:
    image: nginx:1.16
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
    restart: on-failure
    ports:
      - 0.0.0.0:80:80
    depends_on:
      - auth
      - api-frontend
    networks:
      - proxy-net

# Continual deployment

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 #Polling rate
    restart: on-failure
    depends_on:
      - auth
      - app
      - api-frontend

networks:
  auth-net:
  app-net:
  zoo-net:
  proxy-net:

volumes:
  auth-data: